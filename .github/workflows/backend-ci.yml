name: Backend CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (code formatter check)
        run: |
          cd backend
          black --check --diff .

      - name: Run isort (import sorting check)
        run: |
          cd backend
          isort --check-only --diff .

      - name: Run Flake8 (linter)
        run: |
          cd backend
          flake8 . --max-line-length=100 --extend-ignore=E203,W503 --exclude=__pycache__,venv,.venv,alembic

      - name: Run mypy (type checker)
        run: |
          cd backend
          mypy app --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Run Bandit security scanner
        run: |
          cd backend
          bandit -r app -ll -f json -o bandit-report.json || true
          bandit -r app -ll

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: backend/bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: farelens_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: farelens_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://farelens_test:test_password@localhost:5432/farelens_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
        run: |
          cd backend
          pytest -v --cov=app --cov-report=term --cov-report=html --cov-report=xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/htmlcov/

      - name: Check coverage threshold
        run: |
          cd backend
          coverage report --fail-under=80

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: check_dockerfile
        run: |
          if [ -f "backend/Dockerfile" ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
            echo "✅ Dockerfile found"
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Dockerfile found - skipping Docker build test"
          fi

      - name: Set up Docker Buildx
        if: steps.check_dockerfile.outputs.has_dockerfile == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only, no push)
        if: steps.check_dockerfile.outputs.has_dockerfile == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          tags: farelens-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
